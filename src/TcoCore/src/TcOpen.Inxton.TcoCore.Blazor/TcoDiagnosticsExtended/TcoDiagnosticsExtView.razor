@inherits RenderableViewModelComponentBase<TcoDiagnosticsExtViewModel>
@using Blazm.Components
@using static TcoCore.TcoDiagnosticsExtViewModel
@namespace TcoCore

<div class="container">
    <div class="row">
        <div class="col-1">
            @if (ViewModel._tcoObject.MessageHandler.ActiveMessagesCount > 0)
            {
                <div style="white-space: nowrap ; padding-top: 2px">
                    <div class="spinner-grow spinner-grow-sm text-info" role="status">
                        <span class="visually-hidden"></span>
                    </div>
                    <span class="badge bg-info text-dark">@ViewModel._tcoObject.MessageHandler.ActiveMessagesCount</span>
                </div>
            }
        </div>
        <div class="col-7">
            <select class="w-100 form-select" @bind="@ViewModel.MinMessageCategoryFilter">
                @foreach (var item in eMessageCategories)
                {
                    <option class="form-control" value="@item">@item.ToString()</option>
                }
            </select>
        </div>
        <div class="col-2">
         <button @onclick="ClearAllAndRefresh" type="button" class="btn btn-secondary">
    Clear All
</button>

        </div>
        <div class="col-2">
            @*  <button @onclick="() => ViewModel.UpdateMessagesCommand.Execute(null)"
                    type="button"
                    class="btn btn-primary">
                Update messages
            </button>*@
        </div>
    </div>
    <div class="d-flex flex-row">
        <input type="range" class="form-range tooltip-slider w-75" min="1" max="@MaxDiagnosticsDepth" @bind="DepthValue">
        <span class="mx-3">@DiagnosticsMessage()</span>
    </div>
</div>

<BlazmGrid Data="ViewModel.MessageDisplay" PageSize="12" Sortable="true" UseVirtualize="true" ShowFilter="true">
    <NullGridTemplate>
        No messages found.
    </NullGridTemplate>
    <EmptyGridTemplate>
        No messages found.
    </EmptyGridTemplate>
    <GridColumns>
        <GridColumn CanFilter="true" Field="@nameof(PlainTcoMessage.TimeStamp)" Format="{0:yyyy-MM-dd HH:mm:ss}" Title="Time Raised"/>
        <GridColumn CanFilter="true" Field="@nameof(PlainTcoMessage.TimeStampAcknowledged)" Format="{0:yyyy-MM-dd HH:mm:ss}" Title="Time Acknowledged"/>
<GridColumn Field="@nameof(PlainTcoMessage.CategoryAsEnum)" Title="Kategorie">
    <Template>
        @{
            var message = context as PlainTcoMessage;
            var category = message?.CategoryAsEnum ?? eMessageCategory.None;
        }
        <div>
            @switch (category)
            {
                case eMessageCategory.Trace:
                    <i class="fas fa-search"></i>
                    break;
                case eMessageCategory.Debug:
                    <i class="fas fa-bug"></i>
                    break;
                case eMessageCategory.Info:
                    <i class="fas fa-info-circle"></i>
                    break;
                case eMessageCategory.Warning:
                    <i class="fas fa-exclamation-triangle"></i>
                    break;
                case eMessageCategory.Error:
                    <i class="fas fa-times-circle"></i>
                    break;
                case eMessageCategory.Critical:
                    <i class="fas fa-skull-crossbones"></i>
                    break;
                case eMessageCategory.Fatal:
                    <i class="fas fa-bomb"></i>
                    break;
                case eMessageCategory.Catastrophic:
                    <i class="fas fa-radiation"></i>
                    break;
                default:
                    <i class="fas fa-question-circle"></i>
                    break;
            }
        </div>
    </Template>
</GridColumn>
        <GridColumn Field="@nameof(PlainTcoMessage.Text)" Title="Message" />
        <GridColumn Field="@nameof(PlainTcoMessage.ParentsObjectSymbol)" Title="Pfad" />
        <GridColumn Field="@nameof(PlainTcoMessage.Pinned)"/>
        @*<GridColumn Field="@nameof(PlainTcoMessage.PerCycleCount)" />*@
        <GridColumn Title="Action">
            <Template>
                @{
                    var message = context as PlainTcoMessage;
                }
                @if (message != null)
                {
                    <div style="white-space: nowrap">
                        <button @onclick="() => OnSelectedMessage(message)" type="button" class="btn btn-secondary">
                            <svg width="24" height="24" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z" />
                            </svg>
                        </button>
                        <button class="btn btn-secondary" @onclick="() => ViewModel.AcknowledgeMessage(message)">
                            @if (message.Pinned)
                            {
                                <span>Acknowledge</span>
                            }
                            else
                            {
                                <span>Acknowledged</span>
                            }
                        </button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</BlazmGrid>

@if (ViewModel.AffectedObject != null)
{
    <button @onclick="@(() => { ViewModel.AffectedObject = null; })" type="button" class="btn-close" aria-label="Close"></button>
    <div class="card">
        <RenderableContentControl Context="ViewModel.AffectedObject" Presentation="Service" />
    </div>
}

@code{
    private void ClearAllAndRefresh()
{
    ViewModel.AcknowledgeAllMessages();
    StateHasChanged(); // Force a re-render of the component
}
}